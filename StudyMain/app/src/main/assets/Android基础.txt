
1，为什么不能在子线程中更新ui？为什么不能在主线程中访问网络？
    在 view 的 requestLayout 方法中有 checkThread()方法来检测当前线程是否是主线程。如果不是那就回抛出异常。
    ViewRootImpl的创建是在onResume方法回调之后，而我们一开篇是在onCreate方法中创建子线程并访问UI，
        在那个时刻，ViewRootImpl还没有来得及创建，无法检测当前线程是否是UI线程，所以程序没有崩溃。


2，Activity的启动和布局创建过程
    ZygoteInit启动->ActivityThread.mian ->创建主线程Looper循环->
    AMS(ActivityManagerService的要求，通过IApplicationTHread的接口)负责调度和执行activities、broadcasts和其它操作
    ApplicationThread：首先它不是一个线程，而是一个Binder对象



3，Android中的动态加载（热修复）


4，Android中的动态代理运用（Hook）



5，Handler 相关知识点
   1 )android默认新建的一个线程不会开启消息循环，所以在 new Handler之前，要加 Looper.prepare(),
      之后要加 Looper.loop() ;
   2 ) HandlerThread 继承 Thread ，内部建立了 Looper(),



6, Binder通信
        个人认为Binder机制在Java层是很好理解的，只需要记住，不同进程之间都是拿对方的代理对象进行干活的



7, android 内部是怎么找到 ANR 的，就是主线程发生了阻塞，是怎么自检的
   Service Timeout触发时机，简单说就是 AMS( ActivityManagerService)  中的mHandler收到SERVICE_TIMEOUT_MSG消息时触发。
   出现ANR的情况：
        1)输入事件(按键和触摸事件)5s内没被处理:
        2）BroadcastReceiver的事件(onRecieve方法)在规定时间内没处理完(前台广播为10s，后台广播为60s)：
        3）service 前台20s后台200s未完成启动

  ANR 发生的大概原理如下：
            1.在进行相关操作调用hander.sendMessageAtTime()发送一个ANR的消息，
                     延时时间为ANR发生的时间(如前台Service是当前时间20s之后)。
            2.进行相关的操作3.操作结束后向remove掉该条message。如果相关的操作在规定时间没有执行完成，
                     该条message将被handler取出并执行，就发生了ANR。


8, Activity的四种加载模式(LaunchMode)的应用场景？
   standard
   singleTop
   singleTask
   singleInstance



9.前台广播为，后台广播 有什么不同
    默认是后台广播。
    广播中添加一个：intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);就变成前台广播了。 当发送广播时，允许其在前台运行的接受者拥有更高的优先级，更短的超时间隔。
    前台队列的超时时间是10s，而后台是60s. 后台广播的设计思想就是当前应用优先，尽可能多让收到广播的应用有充足的时间把事件做完。
    而前台广播的目的是紧急通知，设计上就倾向于当前应用赶快处理完，尽快传给下一个。



国内一线互联网公司内部面试题库[转]
https://www.jianshu.com/p/2125741d9038?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation

Java面试宝典Beta5.0
https://www.jianshu.com/p/fb7d48083e5e?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation




10，Android编译步奏
    . build/envsetup.sh
    lunch
    make -j 10

11，Android中特有的数据结构

ArrayMap  : 对标java 中的 hashmap
SparseBoolMap，SparseIntMap，SparseLongMap，LongSparseMap



12 looper架构
    要理解Handler的消息机制，就不得不说 Handler/Looper/Message/MessageQueue/这四4个类
    Handler：  发送和处理消息和Runnable对象
    Looper：   不断的循环执行(Looper.loop)，按分发机制将消息分发给目标处理者
    Message：  消息
    MessageQueue： 消息队列的


    进一步问： Handler 为什么可以切换线程 ？
        其实Handler机制的实现原理很简单, 就是通过共享变量来实现的，在Handler机制中充当共享变量角色的就是MessageQueue对象.
        在 MessageQueue 中入队做了 synchronized (this)  处理
        也可以理解为：跨线程是因为，谁开启的消息循环，Handler回调(dispatchMessage())就在哪个线程执行，跟在哪里发送的消息无关。


        但是如果一个线程有多个Handler呢？难道每个Handler都需要一个 Looper 吗？
        这就用到  ThreadLocal 了，他可以让不同的线程取出来的 Looper 是唯一的。
          Looper 类中有常量：
               private static final ThreadLocal<Looper> threadLocal=new ThreadLocal<>();
               在 public  static void prepare() 中：
                            threadLocal.set(new Looper() );

详解ThreadLocal
    https://juejin.im/post/59c7b3105188257a3a52c49d
    为不同的线程创建变量副本（以线程为key进行存出）
            ThreadLocal<Boolean> mBooleanThreadLocal = new ThreadLocal<>();
             mBooleanThreadLocal.set(true);

在子线程中创建Handler3步曲：
        Looper.prepare();
        new Handler()
        Looper.loop();


13  binder工作原理
    不同进程之间都是拿对方的代理对象进行干活的
    在Binder的client部分就是通过代理模式来访问Server端的
    Binder是一个非常典型的代理模式，是一种远程代理，实际上Proxy代理的是另外一个进程中的Stub对象。
    内部是将接口函数标记为对应的ID，然后根据这个ID来标识目前调用的是哪一个函数


14 ActivityThread，Ams，Wms 的工作原理

    ActivityThread:   App入口类，
    Ams:  对于Android四大组件的管理，包括启动，生命周期管理等
    Wms:  窗口的管理者，它负责窗口的启动、添加和删除， 窗口的大小和层级
          事件的分发
          WmS不在意该窗口是哪个应用程序的，WmS按一定得规则判断哪个窗口处于活动状态
          不负责View绘制（SurfaceFlinger 进程 负责绘制）




15，android从网络加载一个10M的图片，说下注意事项
    图片缓存、异常恢复、质量压缩


16,Fragment如果在Adapter中使用应该如何解耦？



17,大体说清一个应用程序安装到手机上时发生了什么
    PackageManagerService 安负责装(概括为：拷贝，解析，优化，更新系统数据库)
    1,将apk文件复制到data/app目录
    2,解析apk信息(解析menifest，签名，校验)
    3,dexopt操作（ 把优化后的odex文件的后缀也是.dex,放在data/dalvik-cache，ART会使用dex2oat程序所有的字节码预编译成了机器码）
    4,更新权限信息（/data/system/packages.xml，安装的APK的所有属性，权限等信息。当系统中的APK安装、删除、升级时，文件就会被更新）
    5,完成安装,发送Intent.ACTION_PACKAGE_ADDED广播

  安装过程： 复制apk安装包到/data/app目录下，解压并扫描安装包，
            解析AndroidManifest文件，并在/data/data目录下创建对应的应用数据目录，
            然后针对dalvik/art环境优化dex文件，保存到dalvik-cache目录，
            将AndroidManifest文件解析出的组件、权限注册到PackageManagerService，完成后发送广播。



18,App启动流程，从点击桌面开始
    Launcher所在的进程，启动远程进程，利用Binder发送消息给system_server进程（ActiivityManagerService）；
    AMS启动进程的操作会先调用AMS.startProcessLocked方法，内部调用 Process.start(android.app.ActivityThread);而后通过socket通信告知Zygote进程fork子进程，即app进程。
    进程创建后将ActivityThread加载进去，执行ActivityThread.main()方法。
    创建主线程循环，通过binder 告诉 AMS 进程创建成功，AMS通过 ApplicationThreadProxy 来控制生命周期



19,Android中进程内存的分配，能不能自己分配定额内存？
    每个app分配的内存大小取决于 /system/build.prop 里的参数



20,如何保证一个后台服务不被杀死？（相同问题：如何保证service在后台不被kill？）比较省电的方式是什么？


21,App中唤醒其他进程的实现方式

    第一种：直接通过包名：
        Intent LaunchIntent = getPackageManager().getLaunchIntentForPackage("com.joyodream.jiji");
                 startActivity(LaunchIntent);

    第二种：通过自定义的Action：

                 Intent intent = new Intent();
                 intent.setAction("com.joyodream.jiji.main");
                 MainActivity.this.startActivity(intent);

                <intent-filter>
                 <action android:name="com.joyodream.jiji.main" />
                 <category android:name="android.intent.category.DEFAULT" />
             </intent-filter>

    第三种：通过Scheme：
                Intent intent = new Intent();
                 intent.setData(Uri.parse("joyodream://......"));
                 startActivity(intent);

            <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.DEFAULT" />
                 <data android:scheme="joyodream" android:ssp="jiji" />
             </intent-filter>

        如URI是“http://www.baidu.com”，可以分成scheme部分"http"和ssp部分"//www.baidu.com"


22，startActivityForResult(Intent intent，int requestCode)：
    以指定指定的请求码（requestCode）启动Activity，并且程序将会等到新启动Activity的结果
    (通过重写onActivityResult()方法来获取)
    finishActivity(intrequestCode):结束以startActivityForResult(Intent intent，int requestCode)
    方法启动的Activity。


http://gityuan.com/



23，Android中的权限管理机制



24, webview+html 混合开发（java与js相互调用）
    1） Android 调用  js:
        在 Android 中创建通往 javascript 的接口;
        在 html  中定义要执行的方法;
        在  Android  中的具体事件中进行调用。
         contentWebView.loadUrl("javascript:javacalljs()");


   js中调用Android 方法  :
       html中调用  Android 方法则反来，在 Andorid 中定义要调用的方法， html 中绑定事件进行调用。
       <button onclick="window.wjj.startFunction()">点击调用java 代码</button>
        startFunction 在java代码中是被 @JavascriptInterface
                                 注解的类：	public void startFunction()





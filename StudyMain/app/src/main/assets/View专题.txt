
https://www.cnblogs.com/dasusu/p/8311324.html


1,Requestlayout,onlayout,onDraw,DrawChild 区别与联系-猎豹
    Requestlayout：
    调用requestLayout()方法的时机是：当前View发生了一些改变，这个改变使得现有的View失效，所以调用requestLayout()方法对View树进行重新布局，过程包括了measure()和layout()过程，但不会调用draw()过程，即不会发生重新绘制视图过程。

    onlayout：自定义view的三大方法之一（View需要给自己设置大小和位置了或者ViewGroup需要给子View和ViewGroup自身时调用。）
    onDraw：自定义view的三大方法之一
    DrawChild： drawChild()去重新回调每个子视图的draw()方法


2,invalidate()和postInvalidate()的区别及使用-百度


3,View刷新机制-百度-美团
    在Android的布局体系中，父View负责刷新、布局显示子View；而当子View需要刷新时，则是通知父View来完成。

    其实，以前我一直以为如果界面上某个小小的 View 发起了 invalidate() 重绘之类的操作，
    那么应该就只是它自己的 onLayout(), onDraw() 被调用来重绘而已。最后才清楚，
    原来，即使再小的 View，如果发起了重绘的请求，那么也需要先层层走到 ViewRootImpl 里去，
    而且还不是马上就执行重绘操作，而是需要等待下一个屏幕刷新信号来的时候，
    再从 DecorView 开始层层遍历到这些需要刷新的 View 里去重绘它们。


答：造成丢帧大体上有两类原因？
    一是遍历绘制 View 树计算屏幕数据的时间超过了 16.6ms；
    二是，主线程一直在处理其他耗时的消息，导致遍历绘制 View 树的工作迟迟不能开始，从而超过了 16.6 ms 底层切换下一帧画面的时机。

https://www.cnblogs.com/dasusu/p/8311324.html

DecorView ：Android 顶级视图，它是竖直的Linearlayout，上面是标题，下面是内容栏（id是content）
ViewRootImpl：ViewRootImpl 是实现 View 的绘制的类，里面有三个方法是关键：performMeasure，performLayout，事件分发也是ViewRootImpl 完成的

ViewRootImpl：  每个界面上的 View 的刷新，绘制，点击事件的分发其实都是由 ViewRootImpl 作为发起者的，
                由 ViewRootImpl 控制这些操作从 DecorView 开始遍历 View 树去分发处理。
                在ViewRootImpl未初始化创建的时候是可以进行子线程更新UI的，而它创建是在activity.handleResumeActivity方法调用，即DecorView被添加到WindowManager的时候
                ViewRootImpl绘制View的时候会先检查当前线程是否是主线程，是才能继续绘制下去



4,View绘制流程-百度

    View的整个绘制流程可以分为以下三个阶段：
    1） onMeasure(int widthMeasureSpec, int heightMeasureSpec)  判断是否需要重新计算View的大小，需要的话则计算；
    2   onLayout(boolean changed, int left, int top, int right, int bottom)  判断是否需要重新计算View的位置，需要的话则计算；
    3）onDraw(Canvas canvas) 判断是否需要重新绘制View，需要的话则重绘制。
     注意：
        1)屏幕每隔 16.6 ms 刷新一次
        2） 当 View 发起重绘操作 invalidate() 时，最后也调用了 ViewRootImpl 的 scheduleTraversals() 这个方法


5,Touch事件传递流程-小米



6,Activity/Window/View三者的差别,fragment的特点-360



7, LinearLayout 和 RelativeLayout 性能对比-百度
   RelativeLayout:  需要横向纵向分别进行一次排序测量。
   LinearLayout: 横纵方向判断已经配置好，   不使用weight属性，将只进行一次measure的过程。


8,优化自定义view （百度-乐视-小米）
     1，尽量View的层级是扁平化的
     2，onDraw 绘制要快（ 1借助缓存， 2不在onDraw里做对象初始化 ）
     3，view 自己的状态保存


9,视觉卡顿是怎么来的？
    1,布局复杂，绘制时间超过 16.6 ms
    2,在主线程中做了太多的事情，影响了布局绘制


10,Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，如果每次渲染都成功，
    这样就能够达到流畅的画面所需要的60fps，为了能够实现60fps，
    这意味着程序的大多数操作都必须在16ms内完成。

    在开发者选项中有个“ GPU呈现模式分析(Profile GPU rendering，选择在adb shell dumpsys gfxinfo中)”功能，
    在开启这个功能后，系统就会记录保留每个界面最后128帧图像绘制的相关时间信息。
    在开启这个功能后，重新启动APP，滑动页面然后执行adb命令

    adb shell dumpsys gfxinfo com.xiaomi.shop
    测量UI帧率：
    adb shell dumpsys gfxinfo com.carboxtech.txzvoice
    adb shell dumpsys gfxinfo com.carboxtech.txzvoice framestats

    使用  gamebench 等app 测试



11,自定义控件原理：
        View的绘制基本上由 onMeasure()、onLayout()、onDraw()这个三个函数完成



12,自定义View注意事项
   渲染帧率、内存


